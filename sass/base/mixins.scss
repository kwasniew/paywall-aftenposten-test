@mixin clearfix {
    zoom: 1;

    &:before,
    &:after {
        content: "";
        display: table;
    }

    &:after { clear:both; }
}

@mixin optimize-font-rendering {
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
}

@mixin button {
    padding: 0;
    border: none;
    cursor: pointer;
}

@mixin transition($properties: all, $duration: .3s, $easing: ease-out, $delay: 0, $performance: 'true') {
    @if length($properties) > 1 {
        transition-property: $properties;
        transition-duration: $duration;
        transition-timing-function: $easing;
        transition-delay: $delay;
    } @else {
        transition: $properties $duration $easing $delay;
    }

    @if $performance == 'true' {
        // http://davidwalsh.name/translate3d
        -webkit-transform: translate3d(0, 0, 0);

        // http://stackoverflow.com/questions/2946748/iphone-webkit-css-animations-cause-flicker
        -webkit-perspective: 1000;
        -webkit-backface-visibility: hidden;
    }
}

@mixin animation($name, $duration: 1s, $easing: linear, $iterations: infinite, $fill: forwards) {
    animation-name: $name;
    animation-duration: $duration;
    animation-timing-function: $easing;
    animation-iteration-count: $iterations;
    animation-fill-mode: $fill;
}

@mixin placeholder-text($color, $font-style: normal) {
    ::-webkit-input-placeholder { color: $color; font-style: $font-style; }
    :-moz-placeholder { color: $color; font-style: $font-style; }
    ::-moz-placeholder { color: $color; font-style: $font-style; }
    :-ms-input-placeholder { color: $color; font-style: $font-style; }
}

@mixin spinner($width: 6px, $height: 2px, $radius: 8px, $duration: 1s, $color: #333, $particles: 12) {
    position: absolute;
    top: 50%;
    left: 50%;
    z-index: 2;
    opacity: 0;
	@include transition((left, opacity));

    i {
        display: block;
        position: absolute;
        width: $width;
        height: $height;
        background: $color;
        opacity: 0.2;
        border-radius: $height;
        @include animation(spin, $duration, ease);

        @for $i from 1 through $particles {
            &:nth-child(#{$i}) {
                $angle: $i / $particles * 360;
                transform: rotate(#{$angle}deg) translateX(#{$radius});
                animation-delay: $i * ($duration / $particles);
            }
        }
    }
}